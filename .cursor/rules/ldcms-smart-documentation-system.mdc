---
alwaysApply: false
description: "FastAdmin LDCMS智能文档查询系统 - 本地优先，在线备选，自动检测请求头过期并提醒用户更新。适用于LDCMS开发、模板定制、API调用、问题排查等所有LDCMS相关技术支持场景。"
---

# FastAdmin LDCMS 智能文档查询系统

> **🎯 目标**: 智能查询LDCMS文档，优先本地，备选在线
> **🔍 查询策略**: 本地docs-ldcms/ → 在线doc.fastadmin.net/ldcms
> **⚡ 自动切换**: 请求头过期时自动提醒用户更新

---

## 🚨 LDCMS文档查询强制规则

**当AI检测到LDCMS相关问题时，必须按以下顺序查询文档：**

### 📚 第一优先级：本地文档查询

```javascript
// LDCMS本地文档查询规则
const LDCMS_LOCAL_DOCS = {
    base_path: 'docs-ldcms/',
    
    // 文档分类映射
    categories: {
        '模板开发': 'docs-ldcms/模板二次开发/',
        '系统使用': 'docs-ldcms/使用教程/',
        'API接口': 'docs-ldcms/API文档/',
        '问题解决': 'docs-ldcms/常见问题/',
        '小程序': 'docs-ldcms/小程序开发/' // 已排除内容
    },
    
    // 关键词映射到具体文档
    keyword_mapping: {
        // 模板开发相关
        '标签': ['模板二次开发/07-列表标签.md', '模板二次开发/14-Tags标签.md'],
        '轮播图': ['模板二次开发/06-轮播图标签.md'],
        '栏目': ['模板二次开发/05-栏目标签.md', '使用教程/栏目管理.md'],
        '导航': ['模板二次开发/导航标签.md'],
        '搜索': ['模板二次开发/13-搜索标签.md'],
        '筛选': ['模板二次开发/12-多条件筛选标签.md'],
        '面包屑': ['模板二次开发/09-面包屑标签.md'],
        '友情链接': ['模板二次开发/10-友情链接标签.md'],
        '留言表单': ['模板二次开发/11-留言表单.md', '使用教程/自定义表单.md'],
        '函数': ['模板二次开发/常用函数.md'],
        
        // 系统使用相关  
        '配置': ['使用教程/系统配置.md', '使用教程/站点配置.md'],
        '多语言': ['使用教程/多语言管理.md'],
        '模型': ['使用教程/模型管理.md', '使用教程/模型字段管理.md'],
        '内容': ['使用教程/内容管理.md'],
        '模板': ['使用教程/模板管理.md'],
        '翻译': ['使用教程/有道api翻译.md'],
        '万能标签': ['使用教程/万能标签管理.md'],
        '内链': ['使用教程/内链管理.md'],
        
        // API相关
        'API': ['API文档/API.md'],
        'api': ['API文档/API.md'],
        '接口': ['API文档/API.md'],
        
        // 问题解决相关
        '伪静态': ['常见问题/常见问题.md'],
        '404': ['常见问题/常见问题.md'],
        '缓存': ['常见问题/常见问题.md'],
        '编辑器': ['常见问题/常见问题.md'],
        '升级': ['常见问题/常见问题.md']
    }
};

// 本地文档查询函数
function queryLocalLdcmsDocs(userQuery) {
    const results = [];
    
    // 1. 关键词匹配查询
    for (const [keyword, files] of Object.entries(LDCMS_LOCAL_DOCS.keyword_mapping)) {
        if (userQuery.toLowerCase().includes(keyword)) {
            results.push(...files);
        }
    }
    
    // 2. 如果没有关键词匹配，进行全文搜索
    if (results.length === 0) {
        results.push('docs-ldcms/README.md'); // 返回索引文件
    }
    
    return [...new Set(results)]; // 去重
}
```

### 🌐 第二优先级：在线文档查询

```javascript
// LDCMS在线文档查询配置
const LDCMS_ONLINE_DOCS = {
    base_url: 'https://doc.fastadmin.net/ldcms/',
    
    // 用户提供的有效请求头配置
    request_headers: {
        ':authority': 'doc.fastadmin.net',
        ':method': 'GET',
        ':scheme': 'https',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'accept-encoding': 'gzip, deflate, br, zstd',
        'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-US;q=0.7',
        'cache-control': 'max-age=0',
        'cookie': 'fainsite=1; fausername=hellopyj; Hm_lvt_60caac049a50d7ce2a65fb5c83eea1fb=1751879706,1752134669,1752665700; Hm_lvt_a7920d6e7a274469db89ea3dc24532a5=1751880735,1752135068,1752665711; fakefu_user=1952461%7C864000%7C1755371866%7Cbd517a0b089570ecdd962ec0a0c79f52; PHPSESSID=sq9jbgto2doggfsfubpt5m6b46; faivc=26708905f38855e8e8ddbf67e02f7eae; faeid=wwp8; fauid=2839; fatoken=7873d562-29cb-465f-93e4-a43468d2de71',
        'dnt': '1',
        'priority': 'u=0, i',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'none',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1'
    },
    
    // 请求头有效性标识
    headers_status: {
        last_verified: '2024-08-09',
        expiry_indicators: [
            '需要购买权限',
            '登录已过期', 
            '访问被拒绝',
            'Access Denied',
            '401 Unauthorized',
            '403 Forbidden'
        ]
    }
};

// 在线文档查询函数
async function queryOnlineLdcmsDocs(userQuery) {
    try {
        // 使用浏览器自动化工具访问在线文档
        const response = await browserNavigateWithHeaders(
            LDCMS_ONLINE_DOCS.base_url,
            LDCMS_ONLINE_DOCS.request_headers
        );
        
        // 检查是否需要更新请求头
        if (isHeadersExpired(response)) {
            return {
                status: 'headers_expired',
                message: '🔐 请求头已过期，请提供新的请求头信息'
            };
        }
        
        // 执行文档搜索和内容提取
        return await extractLdcmsDocumentation(userQuery);
        
    } catch (error) {
        return {
            status: 'error',
            message: '在线文档访问失败：' + error.message
        };
    }
}

// 请求头过期检测
function isHeadersExpired(response) {
    const expiry_indicators = LDCMS_ONLINE_DOCS.headers_status.expiry_indicators;
    return expiry_indicators.some(indicator => 
        response.content?.includes(indicator)
    );
}
```

---
## 🔄 智能查询流程

### 执行顺序（强制遵循）

```mermaid
flowchart TD
    A[用户LDCMS问题] --> B[检测查询关键词]
    B --> C[第一步：查询本地docs-ldcms/]
    C --> D{本地文档是否充分解答?}
    D -->|是| E[返回本地文档内容]
    D -->|否| F[第二步：查询在线文档]
    F --> G[使用预设请求头访问]
    G --> H{请求头是否有效?}
    H -->|是| I[提取在线文档内容]
    H -->|否| J[提示用户更新请求头]
    I --> K[合并本地+在线内容]
    K --> L[返回完整解答]
    
    style C fill:#4CAF50
    style F fill:#2196F3  
    style J fill:#FF9800
    style L fill:#9C27B0
```

### 具体实施步骤

```python
class LdcmsSmartDocumentationSystem:
    """LDCMS智能文档查询系统"""
    
    def __init__(self):
        self.local_docs_path = 'docs-ldcms/'
        self.online_base_url = 'https://doc.fastadmin.net/ldcms/'
        self.request_headers = LDCMS_ONLINE_DOCS.request_headers
    
    def query(self, user_question):
        """智能查询主函数"""
        
        # 第一步：本地文档查询
        local_results = self.query_local_docs(user_question)
        
        if self.is_sufficient_answer(local_results, user_question):
            return self.format_local_response(local_results)
        
        # 第二步：在线文档查询
        online_results = self.query_online_docs(user_question)
        
        if online_results['status'] == 'headers_expired':
            return self.request_headers_update()
        
        # 第三步：合并结果
        return self.merge_results(local_results, online_results)
    
    def query_local_docs(self, question):
        """查询本地文档"""
        relevant_files = queryLocalLdcmsDocs(question)
        
        content = []
        for file_path in relevant_files:
            try:
                # 使用codebase_search或read_file读取本地文档
                file_content = read_file(file_path)
                content.append({
                    'source': 'local',
                    'file': file_path,
                    'content': file_content
                })
            except FileNotFoundError:
                continue
        
        return content
    
    def query_online_docs(self, question):
        """查询在线文档"""
        return queryOnlineLdcmsDocs(question)
    
    def is_sufficient_answer(self, local_results, question):
        """判断本地文档是否充分解答了问题"""
        
        # 检查关键指标
        sufficient_indicators = [
            len(local_results) > 0,  # 有相关文档
            any('详细示例' in result['content'] for result in local_results),  # 包含示例
            any('代码' in result['content'] for result in local_results),      # 包含代码
        ]
        
        # 特殊情况：完全匹配的文档认为充分
        perfect_match_keywords = ['API', '常见问题', '配置', '安装']
        if any(keyword in question for keyword in perfect_match_keywords):
            return len(local_results) > 0
        
        return sum(sufficient_indicators) >= 2
    
    def request_headers_update(self):
        """请求用户更新请求头"""
        return {
            'status': 'headers_expired',
            'message': '''
🔐 LDCMS在线文档请求头已过期

请提供新的请求头信息，格式如下：

```
:authority
doc.fastadmin.net
:method  
GET
cookie
[您的完整cookie信息]
user-agent
[您的user-agent信息]
```

获取方法：
1. 打开浏览器访问 https://doc.fastadmin.net/ldcms/
2. 按F12打开开发者工具
3. 切换到Network标签页
4. 刷新页面
5. 找到主请求，复制Request Headers
6. 提供给我即可自动更新
            '''
        }
    
    def merge_results(self, local_results, online_results):
        """合并本地和在线查询结果"""
        merged_content = {
            'local_docs': local_results,
            'online_docs': online_results,
            'comprehensive_answer': True
        }
        
        return merged_content
    
    def format_response(self, results):
        """格式化响应内容"""
        response = "## 📚 LDCMS文档查询结果\n\n"
        
        if results.get('local_docs'):
            response += "### 📖 本地文档\n"
            for doc in results['local_docs']:
                response += f"- **{doc['file']}**\n"
                response += f"  {doc['content'][:200]}...\n\n"
        
        if results.get('online_docs') and results['online_docs']['status'] == 'success':
            response += "### 🌐 在线文档补充\n"
            response += results['online_docs']['content']
        
        return response
```

---

## 🎯 智能触发条件

### 自动触发文档查询的关键词

```yaml
# LDCMS文档查询触发词
trigger_keywords:
  # 技术问题类
  technical:
    - "LDCMS怎么"
    - "LDCMS如何"  
    - "LDCMS标签"
    - "LDCMS API"
    - "LDCMS配置"
    - "LDCMS问题"
    - "LDCMS错误"
    
  # 功能咨询类  
  functional:
    - "轮播图"
    - "多语言"
    - "多模板"
    - "栏目管理"
    - "内容管理"
    - "自定义表单"
    - "万能标签"
    
  # 开发指导类
  development:
    - "模板开发"
    - "二次开发"
    - "插件开发"
    - "API开发"
    - "主题定制"
    
  # 问题解决类
  troubleshooting:
    - "不显示"
    - "报错"
    - "404"
    - "伪静态"
    - "升级问题"
    - "缓存问题"

# 触发示例
trigger_examples:
  - "LDCMS的列表标签怎么使用？"           # → 查询 模板二次开发/07-列表标签.md
  - "多语言配置怎么设置？"                # → 查询 使用教程/多语言管理.md
  - "LDCMS API接口文档在哪里？"          # → 查询 API文档/API.md
  - "轮播图不显示怎么解决？"             # → 查询 常见问题/ + 模板二次开发/06-轮播图标签.md
  - "自定义表单怎么创建？"               # → 查询 使用教程/自定义表单.md + 模板二次开发/11-留言表单.md
```

### 智能判断逻辑

```javascript
function shouldTriggerLdcmsDocQuery(userInput) {
    // 1. 明确提到LDCMS
    if (/LDCMS|ldcms/i.test(userInput)) {
        return true;
    }
    
    // 2. 在LDCMS项目上下文中
    if (isInLdcmsProject() && hasLdcmsRelatedKeywords(userInput)) {
        return true;
    }
    
    // 3. 询问FastAdmin插件相关问题
    if (/FastAdmin.*插件|插件.*开发|企业网站/i.test(userInput)) {
        return true;
    }
    
    return false;
}

function hasLdcmsRelatedKeywords(input) {
    const keywords = [
        '轮播图', '多语言', '多模板', '栏目', '导航', 
        '标签', '搜索', '筛选', '表单', '内容管理',
        'API', '接口', '配置', '模板', '主题'
    ];
    
    return keywords.some(keyword => input.includes(keyword));
}
```

---

## 📋 使用规范和注意事项

### AI助手必须遵循的规则

```
✅ 强制执行顺序：
   1. 先查本地 docs-ldcms/ 
   2. 本地不充分才查在线
   3. 请求头过期立即提示用户

✅ 本地查询要求：
   - 使用 codebase_search 语义搜索
   - 使用 read_file 读取具体文档
   - 使用 grep_search 精确匹配关键词
   - 优先返回最相关的文档片段

✅ 在线查询要求：
   - 必须使用提供的完整请求头
   - 检测访问权限状态
   - 提取核心内容
   - 与本地文档去重

✅ 响应格式要求：
   - 明确标注信息来源（本地/在线）
   - 提供文档文件路径引用
   - 包含可执行的代码示例
   - 给出相关文档链接
```

### 用户使用指南

```
📖 如何使用LDCMS智能文档系统：

1. 直接提问：
   "LDCMS的列表标签怎么用？"
   "多语言配置步骤是什么？"
   "API接口怎么调用？"

2. 系统会自动：
   ✓ 搜索本地docs-ldcms/文档
   ✓ 必要时查询在线最新文档
   ✓ 提供完整解答和代码示例

3. 如果提示请求头过期：
   ✓ 按提示获取新的请求头
   ✓ 提供给AI自动更新
   ✓ 继续享受完整文档服务

4. 获得的答案包含：
   ✓ 本地文档引用和内容
   ✓ 在线文档补充信息  
   ✓ 可直接使用的代码
   ✓ 相关文档索引链接
```

---

## 🔧 维护和更新机制

### 请求头自动更新流程

```python
class HeadersManager:
    """请求头管理器"""
    
    def __init__(self):
        self.headers_file = '.cursor/rules/ldcms-headers.json'
        self.expiry_check_interval = 3600  # 1小时检查一次
    
    def update_headers(self, new_headers):
        """更新请求头"""
        headers_data = {
            'headers': new_headers,
            'updated_at': datetime.now().isoformat(),
            'status': 'active'
        }
        
        with open(self.headers_file, 'w') as f:
            json.dump(headers_data, f, indent=2)
    
    def is_headers_valid(self):
        """检查请求头是否有效"""
        try:
            response = test_ldcms_access()
            return not any(
                indicator in response.text 
                for indicator in LDCMS_ONLINE_DOCS.headers_status.expiry_indicators
            )
        except:
            return False
    
    def get_current_headers(self):
        """获取当前请求头"""
        try:
            with open(self.headers_file, 'r') as f:
                data = json.load(f)
                return data.get('headers', LDCMS_ONLINE_DOCS.request_headers)
        except:
            return LDCMS_ONLINE_DOCS.request_headers
```

### 文档索引自动更新

```bash
#!/bin/bash
# 本地文档索引更新脚本

echo "🔄 更新LDCMS文档索引..."

# 扫描docs-ldcms/目录
find docs-ldcms/ -name "*.md" | sort > .cursor/cache/ldcms-docs-index.txt

# 生成关键词映射
python3 .cursor/scripts/generate-ldcms-keywords.py

echo "✅ LDCMS文档索引更新完成"
```

---

**重要提醒**: 
1. 🔥 **本地优先**：始终先查询本地docs-ldcms/文档
2. 🌐 **在线补充**：本地不足时才访问在线文档  
3. 🔐 **请求头管理**：过期时立即提示用户更新
4. 📚 **完整解答**：确保用户获得最全面的LDCMS技术支持

这个智能文档系统确保您在LDCMS开发过程中能够快速获得准确、完整、最新的技术文档支持！